#!/bin/bash

###
# This script prepares a new PVE node
# Tested on Hetzner AX-101 servers
###

# Helpful to read output when debugging
# set -x

#https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
NC='\033[0m' # No Color

# Strict mode
# set -eEuo pipefail
set -eEu
trap 'printf "${RED}Failed on line: $LINENO at command:${NC}\n$BASH_COMMAND\nexit $?\n"' ERR
# IFS=$'\n\t'

# read envivoments
source  /etc/environment
# get real path to script
SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`
# add binary folders to local path
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Read variable from file
function load {
    local FILE="${1}"
    if [[ -f  "${FILE}" ]]
    then 
        source "${FILE}"
    else
        touch "${FILE}"
    fi
}

# Save variable to file
function save {
    local VARIABLE="${1}"
    local VALUE="$(echo ${!1} | xargs)"
    local FILE="${2}"

    if grep -q ^${VARIABLE}= $FILE 2>/dev/null
    then
        eval "sed -i -E 's/${VARIABLE}=.*/${VARIABLE}=\"${VALUE}\"/' $FILE"
    else
        echo "${VARIABLE}=\"${VALUE}\"" >> $FILE
    fi
}

# Update variable in file from stdin
function update {
    local VARIABLE="${1}"
    if [[ $# -eq 2 ]]
    then
        local FILE="${2}"
    else
        local FILE="${SCRIPTPATH}/.env"
    fi

    load ${FILE}

    if [[ ! -v ${VARIABLE} ]];
    then
        eval ${VARIABLE}=""
    fi
    local VALUE="$(echo ${!1} | xargs)"

    printf "\n${RED}Please input ${VARIABLE}${NC}\n"
    read -r -e -p "> " -i "${VALUE}" ${VARIABLE}
    save ${VARIABLE} ${FILE}
    # echo "$VARIABLE is $VALUE"
}

function apt-install {
    for NAME in $*
    do
        local DPKG="dpkg -l | awk '\$2==\"${NAME}\" && \$1==\"ii\" {print \$1,\$2,\$3}'"
        if ! eval "${DPKG} | grep -q ii"
        then
            eval "apt update -y || true"
            eval "apt install -y ${NAME}"
        fi
        # Проверяем результат
        eval "${DPKG}"
    done
}

function insert {
    FILE="${1}"
    REPLACE="${2}"

    eval "touch ${FILE}"

    if [[ $# -eq 2 ]]
    then
        MATCH="$2"
    else
        MATCH="$3"
    fi

    if ! eval "grep -q \"${REPLACE}\" ${FILE}"
    then
        eval "echo \"${REPLACE}\" >> ${FILE}"
    else
        ESCAPED_REPLACE=$(printf '%s\n' "$REPLACE" | sed -e 's/[\/&]/\\&/g')
        ESCAPED_MATCH=$(printf '%s\n' "$MATCH" | sed -e 's/[\/&]/\\&/g')
        eval "sed -i '/${ESCAPED_MATCH}/ s/.*/${ESCAPED_REPLACE}/' ${FILE}"
    fi
}

#-----------------------START-----------------------#

# Загружаем файл с настройками
load ${SCRIPTPATH}/.env

if [[ $# -eq 0 ]]
then
    #Добвляем папку скрипта в PATH
    insert ~/.bashrc "export PATH=\"$PATH:${SCRIPTPATH}\""
    set +eEu
    source ~/.bashrc
    set -eEu

    # Ставим пакеты
    apt-install curl docker docker-compose jq

    # Скачиваем compose файл
    wget -N https://raw.githubusercontent.com/igluko/minima/main/docker-compose.yml

    # Получаем общее количество памяти на хосте
    MEM_TOTAL=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}')

    # # Задаем количество инстансов
    # if ! [[ -v INSTANCE_NUMBER ]]
    # then
    #     # Задаем 1 инстанс, если переменная пустая
    #     INSTANCE_NUMBER="1"
    # fi
    # update INSTANCE_NUMBER
    INSTANCE_NUMBER="1"

    # Задаем пароль
    if ! [[ -v MDS_PASSWORD ]]
    then
        # Генерируем пароль, если старого пароля нет
        MDS_PASSWORD=$(tr -dc a-z0-9 </dev/urandom | head -c 20 ; echo '')
    fi
    printf "\n${ORANGE}Warning. Minima does not support uppercase characters in passwords${NC}\n"
    update MDS_PASSWORD
    printf "\n"

    # Меняем ограничение памяти
    MEM=$((${MEM_TOTAL} / ${INSTANCE_NUMBER}))
    FILE="docker-compose.yml"
    eval "sed -i '/mem_limit/ s/:.*/: ${MEM}k/g' ${FILE}"
    # Меняем MDS пароль
    eval "sed -i '/minima_mdspassword/ s/:.*/: ${MDS_PASSWORD}/g' ${FILE}"

    # Стартуем контейнеры
    docker-compose up -d --scale minima=${INSTANCE_NUMBER}

    # Проверяем
    docker-compose ps -a

    # Отдаем ссылки для подклчения к MDS
    printf  "\n${ORANGE}Адреса для доступа к MiniDapp ниже:${NC}\n\n"
    IP=$(curl -s https://api.ipify.org)
    PORTS=$(docker ps --format '{{.Names}}' | xargs -I {} docker inspect {} --format '{{(index (index .NetworkSettings.Ports "9003/tcp") 0).HostPort}}' 2>/dev/null || true) 
    for PORT in $PORTS
    do
        printf "https://${IP}:$PORT\n\n"
    done


elif [[ $# -eq 1 ]]
then
    if [[ $1 = "restart" ]]
    then
        docker-compose stop
        docker-compose up -d --scale minima=${INSTANCE_NUMBER}
    else
        docker exec -it root_minima_${1} minima
    fi
fi



